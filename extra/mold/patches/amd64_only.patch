diff --git a/CMakeLists.txt b/CMakeLists.txt
index c7a6130..74096b4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -310,14 +310,9 @@ include_directories(${CMAKE_CURRENT_BINARY_DIR})
 # compiler instances. This is hacky but greatly reduces compile time
 # on a multicore machine.
 list(APPEND MOLD_ELF_TARGETS
-  X86_64 I386 ARM64LE ARM64BE ARM32 RV32LE RV32BE RV64LE RV64BE PPC32
-  PPC64V1 PPC64V2 S390X SPARC64 M68K SH4LE SH4BE LOONGARCH32 LOONGARCH64)
+  X86_64)
 
 list(APPEND MOLD_ELF_TEMPLATE_FILES
-  src/arch-arm64.cc
-  src/arch-loongarch.cc
-  src/arch-riscv.cc
-  src/arch-sh4.cc
   src/cmdline.cc
   src/filetype.cc
   src/gc-sections.cc
@@ -385,14 +380,6 @@ target_sources(mold PRIVATE
   lib/perf.cc
   lib/random.cc
   lib/tar.cc
-  src/arch-arm32.cc
-  src/arch-i386.cc
-  src/arch-m68k.cc
-  src/arch-ppc32.cc
-  src/arch-ppc64v1.cc
-  src/arch-ppc64v2.cc
-  src/arch-s390x.cc
-  src/arch-sparc64.cc
   src/arch-x86-64.cc
   src/config.cc
   src/elf.cc
diff --git a/src/main.cc b/src/main.cc
index 13a77ca..feb9e85 100644
--- a/src/main.cc
+++ b/src/main.cc
@@ -286,11 +286,6 @@ int mold_main(int argc, char **argv) {
   if (ctx.arg.emulation.empty())
     ctx.arg.emulation = detect_machine_type(ctx, file_args);
 
-  // Redo if -m is not x86-64.
-  if constexpr (is_x86_64<E>)
-    if (ctx.arg.emulation != X86_64::name)
-      return redo_main(ctx, argc, argv);
-
   Timer t_all(ctx, "all");
 
   install_signal_handler();
diff --git a/src/mold.h b/src/mold.h
index 71add0e..f58c858 100644
--- a/src/mold.h
+++ b/src/mold.h
@@ -1641,7 +1641,6 @@ std::vector<std::string> parse_nonpositional_args(Context<E> &ctx);
 // passes.cc
 //
 
-template <typename E> int redo_main(Context<E> &, int argc, char **argv);
 template <typename E> void create_internal_file(Context<E> &);
 template <typename E> void apply_exclude_libs(Context<E> &);
 template <typename E> void create_synthetic_sections(Context<E> &);
diff --git a/src/passes.cc b/src/passes.cc
index 5928682..31835b9 100644
--- a/src/passes.cc
+++ b/src/passes.cc
@@ -13,52 +13,6 @@
 
 namespace mold {
 
-// Since mold_main is a template, we can't run it without a type parameter.
-// We speculatively run mold_main with X86_64, and if the speculation was
-// wrong, re-run it with an actual machine type.
-template <typename E>
-int redo_main(Context<E> &ctx, int argc, char **argv) {
-  std::string_view target = ctx.arg.emulation;
-
-  if (target == I386::name)
-    return mold_main<I386>(argc, argv);
-  if (target == ARM64LE::name)
-    return mold_main<ARM64LE>(argc, argv);
-  if (target == ARM64BE::name)
-    return mold_main<ARM64BE>(argc, argv);
-  if (target == ARM32::name)
-    return mold_main<ARM32>(argc, argv);
-  if (target == RV64LE::name)
-    return mold_main<RV64LE>(argc, argv);
-  if (target == RV64BE::name)
-    return mold_main<RV64BE>(argc, argv);
-  if (target == RV32LE::name)
-    return mold_main<RV32LE>(argc, argv);
-  if (target == RV32BE::name)
-    return mold_main<RV32BE>(argc, argv);
-  if (target == PPC32::name)
-    return mold_main<PPC32>(argc, argv);
-  if (target == PPC64V1::name)
-    return mold_main<PPC64V1>(argc, argv);
-  if (target == PPC64V2::name)
-    return mold_main<PPC64V2>(argc, argv);
-  if (target == S390X::name)
-    return mold_main<S390X>(argc, argv);
-  if (target == SPARC64::name)
-    return mold_main<SPARC64>(argc, argv);
-  if (target == M68K::name)
-    return mold_main<M68K>(argc, argv);
-  if (target == SH4LE::name)
-    return mold_main<SH4LE>(argc, argv);
-  if (target == SH4BE::name)
-    return mold_main<SH4BE>(argc, argv);
-  if (target == LOONGARCH32::name)
-    return mold_main<LOONGARCH32>(argc, argv);
-  if (target == LOONGARCH64::name)
-    return mold_main<LOONGARCH64>(argc, argv);
-  abort();
-}
-
 template <typename E>
 void apply_exclude_libs(Context<E> &ctx) {
   Timer t(ctx, "apply_exclude_libs");
@@ -3290,7 +3244,6 @@ void show_stats(Context<E> &ctx) {
 
 using E = MOLD_TARGET;
 
-template int redo_main(Context<E> &, int, char **);
 template void create_internal_file(Context<E> &);
 template void apply_exclude_libs(Context<E> &);
 template void create_synthetic_sections(Context<E> &);
