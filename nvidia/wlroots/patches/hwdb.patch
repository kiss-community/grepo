From 4fab7493f6db993533069a260a4c509587016297 Mon Sep 17 00:00:00 2001
From: illiliti <illiliti@protonmail.com>
Date: Sun, 26 Jun 2022 20:14:32 +0300
Subject: [PATCH 1/2] Revert "backend/drm: fetch EDID manufacturer from
 udev_hwdb"

This reverts commit e646d882cf4949d290fff2ba3b7ae4c124f6f13d.
---
 backend/drm/backend.c      |  26 ---------
 backend/drm/drm.c          |   2 +-
 backend/drm/util.c         | 108 +++++++++++++++++++++++++------------
 include/backend/drm/drm.h  |   1 -
 include/backend/drm/util.h |   6 +--
 5 files changed, 79 insertions(+), 64 deletions(-)

diff --git a/backend/drm/backend.c b/backend/drm/backend.c
index 267bbfb29..32722c827 100644
--- a/backend/drm/backend.c
+++ b/backend/drm/backend.c
@@ -1,7 +1,6 @@
 #include <assert.h>
 #include <errno.h>
 #include <drm_fourcc.h>
-#include <libudev.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -59,7 +58,6 @@ static void backend_destroy(struct wlr_backend *backend) {
 
 	finish_drm_resources(drm);
 
-	udev_hwdb_unref(drm->hwdb);
 	free(drm->name);
 	wlr_session_close_file(drm->session, drm->dev);
 	wl_event_source_remove(drm->drm_event);
@@ -174,23 +172,6 @@ static void handle_parent_destroy(struct wl_listener *listener, void *data) {
 	backend_destroy(&drm->backend);
 }
 
-static struct udev_hwdb *create_udev_hwdb(void) {
-	struct udev *udev = udev_new();
-	if (!udev) {
-		wlr_log(WLR_ERROR, "udev_new failed");
-		return NULL;
-	}
-
-	struct udev_hwdb *hwdb = udev_hwdb_new(udev);
-	udev_unref(udev);
-	if (!hwdb) {
-		wlr_log(WLR_ERROR, "udev_hwdb_new failed");
-		return NULL;
-	}
-
-	return hwdb;
-}
-
 struct wlr_backend *wlr_drm_backend_create(struct wl_display *display,
 		struct wlr_session *session, struct wlr_device *dev,
 		struct wlr_backend *parent) {
@@ -245,12 +226,6 @@ struct wlr_backend *wlr_drm_backend_create(struct wl_display *display,
 	drm->session_active.notify = handle_session_active;
 	wl_signal_add(&session->events.active, &drm->session_active);
 
-	drm->hwdb = create_udev_hwdb();
-	if (!drm->hwdb) {
-		wlr_log(WLR_INFO, "Failed to load udev_hwdb, "
-			"falling back to PnP IDs instead of manufacturer names");
-	}
-
 	if (!check_drm_features(drm)) {
 		goto error_event;
 	}
@@ -302,7 +277,6 @@ error_mgpu_renderer:
 error_resources:
 	finish_drm_resources(drm);
 error_event:
-	udev_hwdb_unref(drm->hwdb);
 	wl_list_remove(&drm->session_active.link);
 	wl_event_source_remove(drm->drm_event);
 error_fd:
diff --git a/backend/drm/drm.c b/backend/drm/drm.c
index 262a533e6..eaac669fd 100644
--- a/backend/drm/drm.c
+++ b/backend/drm/drm.c
@@ -1328,7 +1328,7 @@ void scan_drm_connectors(struct wlr_drm_backend *drm,
 			size_t edid_len = 0;
 			uint8_t *edid = get_drm_prop_blob(drm->fd,
 				wlr_conn->id, wlr_conn->props.edid, &edid_len);
-			parse_edid(wlr_conn, edid_len, edid);
+			parse_edid(&wlr_conn->output, edid_len, edid);
 			free(edid);
 
 			char *subconnector = NULL;
diff --git a/backend/drm/util.c b/backend/drm/util.c
index d56eee38f..e7aefcb0a 100644
--- a/backend/drm/util.c
+++ b/backend/drm/util.c
@@ -3,12 +3,10 @@
 #include <drm_fourcc.h>
 #include <drm_mode.h>
 #include <drm.h>
-#include <libudev.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <wlr/util/log.h>
-#include "backend/drm/drm.h"
 #include "backend/drm/util.h"
 
 int32_t calculate_refresh_rate(const drmModeModeInfo *mode) {
@@ -30,42 +28,86 @@ int32_t calculate_refresh_rate(const drmModeModeInfo *mode) {
 	return refresh;
 }
 
-static const char *get_manufacturer(struct udev_hwdb *hwdb, uint16_t code) {
-	static char pnp_id[4];
-
-	// The ASCII 3-letter manufacturer PnP ID is encoded in 5-bit codes
-	pnp_id[0] = ((code >> 10) & 0x1F) + '@';
-	pnp_id[1] = ((code >> 5) & 0x1F) + '@';
-	pnp_id[2] = ((code >> 0) & 0x1F) + '@';
-	pnp_id[3] = '\0';
-
-	if (hwdb == NULL) {
-		return pnp_id;
-	}
-
-	char query[32];
-	snprintf(query, sizeof(query), "acpi:%s:", pnp_id);
-	struct udev_list_entry *acpi_entry =
-		udev_hwdb_get_properties_list_entry(hwdb, query, 0);
-	if (acpi_entry == NULL) {
-		return pnp_id;
+// Constructed from http://edid.tv/manufacturer
+static const char *get_manufacturer(uint16_t id) {
+#define ID(a, b, c) ((a & 0x1f) << 10) | ((b & 0x1f) << 5) | (c & 0x1f)
+	switch (id) {
+	case ID('A', 'A', 'A'): return "Avolites Ltd";
+	case ID('A', 'C', 'I'): return "Ancor Communications Inc";
+	case ID('A', 'C', 'R'): return "Acer Technologies";
+	case ID('A', 'D', 'A'): return "Addi-Data GmbH";
+	case ID('A', 'P', 'P'): return "Apple Computer Inc";
+	case ID('A', 'S', 'K'): return "Ask A/S";
+	case ID('A', 'V', 'T'): return "Avtek (Electronics) Pty Ltd";
+	case ID('B', 'N', 'O'): return "Bang & Olufsen";
+	case ID('B', 'N', 'Q'): return "BenQ Corporation";
+	case ID('C', 'M', 'N'): return "Chimei Innolux Corporation";
+	case ID('C', 'M', 'O'): return "Chi Mei Optoelectronics corp.";
+	case ID('C', 'R', 'O'): return "Extraordinary Technologies PTY Limited";
+	case ID('D', 'E', 'L'): return "Dell Inc.";
+	case ID('D', 'G', 'C'): return "Data General Corporation";
+	case ID('D', 'O', 'N'): return "DENON, Ltd.";
+	case ID('E', 'N', 'C'): return "Eizo Nanao Corporation";
+	case ID('E', 'P', 'H'): return "Epiphan Systems Inc.";
+	case ID('E', 'X', 'P'): return "Data Export Corporation";
+	case ID('F', 'N', 'I'): return "Funai Electric Co., Ltd.";
+	case ID('F', 'U', 'S'): return "Fujitsu Siemens Computers GmbH";
+	case ID('G', 'S', 'M'): return "Goldstar Company Ltd";
+	case ID('H', 'I', 'Q'): return "Kaohsiung Opto Electronics Americas, Inc.";
+	case ID('H', 'S', 'D'): return "HannStar Display Corp";
+	case ID('H', 'T', 'C'): return "Hitachi Ltd";
+	case ID('H', 'W', 'P'): return "Hewlett Packard";
+	case ID('I', 'N', 'T'): return "Interphase Corporation";
+	case ID('I', 'N', 'X'): return "Communications Supply Corporation (A division of WESCO)";
+	case ID('I', 'T', 'E'): return "Integrated Tech Express Inc";
+	case ID('I', 'V', 'M'): return "Iiyama North America";
+	case ID('L', 'E', 'N'): return "Lenovo Group Limited";
+	case ID('M', 'A', 'X'): return "Rogen Tech Distribution Inc";
+	case ID('M', 'E', 'G'): return "Abeam Tech Ltd";
+	case ID('M', 'E', 'I'): return "Panasonic Industry Company";
+	case ID('M', 'T', 'C'): return "Mars-Tech Corporation";
+	case ID('M', 'T', 'X'): return "Matrox";
+	case ID('N', 'E', 'C'): return "NEC Corporation";
+	case ID('N', 'E', 'X'): return "Nexgen Mediatech Inc.";
+	case ID('O', 'N', 'K'): return "ONKYO Corporation";
+	case ID('O', 'R', 'N'): return "ORION ELECTRIC CO., LTD.";
+	case ID('O', 'T', 'M'): return "Optoma Corporation";
+	case ID('O', 'V', 'R'): return "Oculus VR, Inc.";
+	case ID('P', 'H', 'L'): return "Philips Consumer Electronics Company";
+	case ID('P', 'I', 'O'): return "Pioneer Electronic Corporation";
+	case ID('P', 'N', 'R'): return "Planar Systems, Inc.";
+	case ID('Q', 'D', 'S'): return "Quanta Display Inc.";
+	case ID('R', 'A', 'T'): return "Rent-A-Tech";
+	case ID('R', 'E', 'N'): return "Renesas Technology Corp.";
+	case ID('S', 'A', 'M'): return "Samsung Electric Company";
+	case ID('S', 'A', 'N'): return "Sanyo Electric Co., Ltd.";
+	case ID('S', 'E', 'C'): return "Seiko Epson Corporation";
+	case ID('S', 'H', 'P'): return "Sharp Corporation";
+	case ID('S', 'I', 'I'): return "Silicon Image, Inc.";
+	case ID('S', 'N', 'Y'): return "Sony";
+	case ID('S', 'T', 'D'): return "STD Computer Inc";
+	case ID('S', 'V', 'S'): return "SVSI";
+	case ID('S', 'Y', 'N'): return "Synaptics Inc";
+	case ID('T', 'C', 'L'): return "Technical Concepts Ltd";
+	case ID('T', 'O', 'P'): return "Orion Communications Co., Ltd.";
+	case ID('T', 'S', 'B'): return "Toshiba America Info Systems Inc";
+	case ID('T', 'S', 'T'): return "Transtream Inc";
+	case ID('U', 'N', 'K'): return "Unknown";
+	case ID('V', 'E', 'S'): return "Vestel Elektronik Sanayi ve Ticaret A. S.";
+	case ID('V', 'I', 'T'): return "Visitech AS";
+	case ID('V', 'I', 'Z'): return "VIZIO, Inc";
+	case ID('V', 'L', 'V'): return "Valve";
+	case ID('V', 'S', 'C'): return "ViewSonic Corporation";
+	case ID('Y', 'M', 'H'): return "Yamaha Corporation";
+	default:                return "Unknown";
 	}
-
-	struct udev_list_entry *vendor_entry =
-		udev_list_entry_get_by_name(acpi_entry, "ID_VENDOR_FROM_DATABASE");
-	if (vendor_entry == NULL) {
-		return pnp_id;
-	}
-
-	return udev_list_entry_get_value(vendor_entry);
+#undef ID
 }
 
 /* See https://en.wikipedia.org/wiki/Extended_Display_Identification_Data for layout of EDID data.
  * We don't parse the EDID properly. We just expect to receive valid data.
  */
-void parse_edid(struct wlr_drm_connector *conn, size_t len, const uint8_t *data) {
-	struct wlr_output *output = &conn->output;
-
+void parse_edid(struct wlr_output *restrict output, size_t len, const uint8_t *data) {
 	free(output->make);
 	free(output->model);
 	free(output->serial);
@@ -78,7 +120,7 @@ void parse_edid(struct wlr_drm_connector *conn, size_t len, const uint8_t *data)
 	}
 
 	uint16_t id = (data[8] << 8) | data[9];
-	output->make = strdup(get_manufacturer(conn->backend->hwdb, id));
+	output->make = strdup(get_manufacturer(id));
 
 	uint16_t model = data[10] | (data[11] << 8);
 	char model_str[32];
diff --git a/include/backend/drm/drm.h b/include/backend/drm/drm.h
index 700ed6546..7ae4ed165 100644
--- a/include/backend/drm/drm.h
+++ b/include/backend/drm/drm.h
@@ -58,7 +58,6 @@ struct wlr_drm_backend {
 	const struct wlr_drm_interface *iface;
 	clockid_t clock;
 	bool addfb2_modifiers;
-	struct udev_hwdb *hwdb;
 
 	int fd;
 	char *name;
diff --git a/include/backend/drm/util.h b/include/backend/drm/util.h
index 323894b56..b4cdee7d7 100644
--- a/include/backend/drm/util.h
+++ b/include/backend/drm/util.h
@@ -2,15 +2,15 @@
 #define BACKEND_DRM_UTIL_H
 
 #include <stdint.h>
+#include <wlr/types/wlr_output.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 
-struct wlr_drm_connector;
-
 // Calculates a more accurate refresh rate (mHz) than what mode itself provides
 int32_t calculate_refresh_rate(const drmModeModeInfo *mode);
 // Populates the make/model/phys_{width,height} of output from the edid data
-void parse_edid(struct wlr_drm_connector *conn, size_t len, const uint8_t *data);
+void parse_edid(struct wlr_output *restrict output, size_t len,
+	const uint8_t *data);
 // Returns the string representation of a DRM output type
 const char *conn_get_name(uint32_t type_id);
 
-- 
GitLab


From 474d001258cb10abbf8ec11e275c73e2b894d45b Mon Sep 17 00:00:00 2001
From: illiliti <illiliti@protonmail.com>
Date: Mon, 27 Jun 2022 00:11:47 +0300
Subject: [PATCH 2/2] backend/drm: use pnp.ids to fetch EDID data

---
 backend/drm/gen_pnpids.sh | 25 +++++++++++++
 backend/drm/meson.build   | 20 ++++++++++
 backend/drm/util.c        | 78 +++------------------------------------
 meson.build               |  2 +-
 meson_options.txt         |  1 +
 5 files changed, 53 insertions(+), 73 deletions(-)
 create mode 100755 backend/drm/gen_pnpids.sh

diff --git a/backend/drm/gen_pnpids.sh b/backend/drm/gen_pnpids.sh
new file mode 100755
index 000000000..c6a616bd8
--- /dev/null
+++ b/backend/drm/gen_pnpids.sh
@@ -0,0 +1,25 @@
+#!/bin/sh -eu
+#
+# usage: gen_pnpids.sh < pnp.ids > pnpids.h
+
+gen_pnps()
+{
+	while read -r id vendor; do
+		[ "${#id}" = 3 ] || exit 1
+
+		a=${id%??}
+		_id=${id#?}
+		b=${_id%?}
+		c=${_id#?}
+
+		printf '\t[PNP_ID(%s, %s, %s)] = "%s",\n' "'$a'" "'$b'" "'$c'" "$vendor"
+	done
+}
+
+cat << EOF
+#define PNP_ID(a, b, c) ((a & 0x1f) << 10) | ((b & 0x1f) << 5) | (c & 0x1f)
+static const char *pnp_ids[] = {
+$(gen_pnps)
+};
+#undef PNP_ID
+EOF
diff --git a/backend/drm/meson.build b/backend/drm/meson.build
index cc791f362..53ee172a6 100644
--- a/backend/drm/meson.build
+++ b/backend/drm/meson.build
@@ -1,3 +1,23 @@
+pnpids_file = get_option('pnpids_file')
+if pnpids_file == ''
+	pnpids_file = join_paths(get_option('prefix'), get_option('datadir'),
+		'hwdata', 'pnp.ids')
+endif
+
+pnpids_header = custom_target(
+	'pnpids.h',
+	output: 'pnpids.h',
+	input: pnpids_file,
+	feed: true,
+	capture: true,
+	command: files('gen_pnpids.sh'),
+)
+pnpids_dep = declare_dependency(
+	sources: pnpids_header,
+	include_directories: include_directories('.'),
+)
+wlr_deps += pnpids_dep
+
 wlr_files += files(
 	'atomic.c',
 	'backend.c',
diff --git a/backend/drm/util.c b/backend/drm/util.c
index e7aefcb0a..384ea0918 100644
--- a/backend/drm/util.c
+++ b/backend/drm/util.c
@@ -8,6 +8,7 @@
 #include <string.h>
 #include <wlr/util/log.h>
 #include "backend/drm/util.h"
+#include "pnpids.h"
 
 int32_t calculate_refresh_rate(const drmModeModeInfo *mode) {
 	int32_t refresh = (mode->clock * 1000000LL / mode->htotal +
@@ -28,80 +29,13 @@ int32_t calculate_refresh_rate(const drmModeModeInfo *mode) {
 	return refresh;
 }
 
-// Constructed from http://edid.tv/manufacturer
 static const char *get_manufacturer(uint16_t id) {
-#define ID(a, b, c) ((a & 0x1f) << 10) | ((b & 0x1f) << 5) | (c & 0x1f)
-	switch (id) {
-	case ID('A', 'A', 'A'): return "Avolites Ltd";
-	case ID('A', 'C', 'I'): return "Ancor Communications Inc";
-	case ID('A', 'C', 'R'): return "Acer Technologies";
-	case ID('A', 'D', 'A'): return "Addi-Data GmbH";
-	case ID('A', 'P', 'P'): return "Apple Computer Inc";
-	case ID('A', 'S', 'K'): return "Ask A/S";
-	case ID('A', 'V', 'T'): return "Avtek (Electronics) Pty Ltd";
-	case ID('B', 'N', 'O'): return "Bang & Olufsen";
-	case ID('B', 'N', 'Q'): return "BenQ Corporation";
-	case ID('C', 'M', 'N'): return "Chimei Innolux Corporation";
-	case ID('C', 'M', 'O'): return "Chi Mei Optoelectronics corp.";
-	case ID('C', 'R', 'O'): return "Extraordinary Technologies PTY Limited";
-	case ID('D', 'E', 'L'): return "Dell Inc.";
-	case ID('D', 'G', 'C'): return "Data General Corporation";
-	case ID('D', 'O', 'N'): return "DENON, Ltd.";
-	case ID('E', 'N', 'C'): return "Eizo Nanao Corporation";
-	case ID('E', 'P', 'H'): return "Epiphan Systems Inc.";
-	case ID('E', 'X', 'P'): return "Data Export Corporation";
-	case ID('F', 'N', 'I'): return "Funai Electric Co., Ltd.";
-	case ID('F', 'U', 'S'): return "Fujitsu Siemens Computers GmbH";
-	case ID('G', 'S', 'M'): return "Goldstar Company Ltd";
-	case ID('H', 'I', 'Q'): return "Kaohsiung Opto Electronics Americas, Inc.";
-	case ID('H', 'S', 'D'): return "HannStar Display Corp";
-	case ID('H', 'T', 'C'): return "Hitachi Ltd";
-	case ID('H', 'W', 'P'): return "Hewlett Packard";
-	case ID('I', 'N', 'T'): return "Interphase Corporation";
-	case ID('I', 'N', 'X'): return "Communications Supply Corporation (A division of WESCO)";
-	case ID('I', 'T', 'E'): return "Integrated Tech Express Inc";
-	case ID('I', 'V', 'M'): return "Iiyama North America";
-	case ID('L', 'E', 'N'): return "Lenovo Group Limited";
-	case ID('M', 'A', 'X'): return "Rogen Tech Distribution Inc";
-	case ID('M', 'E', 'G'): return "Abeam Tech Ltd";
-	case ID('M', 'E', 'I'): return "Panasonic Industry Company";
-	case ID('M', 'T', 'C'): return "Mars-Tech Corporation";
-	case ID('M', 'T', 'X'): return "Matrox";
-	case ID('N', 'E', 'C'): return "NEC Corporation";
-	case ID('N', 'E', 'X'): return "Nexgen Mediatech Inc.";
-	case ID('O', 'N', 'K'): return "ONKYO Corporation";
-	case ID('O', 'R', 'N'): return "ORION ELECTRIC CO., LTD.";
-	case ID('O', 'T', 'M'): return "Optoma Corporation";
-	case ID('O', 'V', 'R'): return "Oculus VR, Inc.";
-	case ID('P', 'H', 'L'): return "Philips Consumer Electronics Company";
-	case ID('P', 'I', 'O'): return "Pioneer Electronic Corporation";
-	case ID('P', 'N', 'R'): return "Planar Systems, Inc.";
-	case ID('Q', 'D', 'S'): return "Quanta Display Inc.";
-	case ID('R', 'A', 'T'): return "Rent-A-Tech";
-	case ID('R', 'E', 'N'): return "Renesas Technology Corp.";
-	case ID('S', 'A', 'M'): return "Samsung Electric Company";
-	case ID('S', 'A', 'N'): return "Sanyo Electric Co., Ltd.";
-	case ID('S', 'E', 'C'): return "Seiko Epson Corporation";
-	case ID('S', 'H', 'P'): return "Sharp Corporation";
-	case ID('S', 'I', 'I'): return "Silicon Image, Inc.";
-	case ID('S', 'N', 'Y'): return "Sony";
-	case ID('S', 'T', 'D'): return "STD Computer Inc";
-	case ID('S', 'V', 'S'): return "SVSI";
-	case ID('S', 'Y', 'N'): return "Synaptics Inc";
-	case ID('T', 'C', 'L'): return "Technical Concepts Ltd";
-	case ID('T', 'O', 'P'): return "Orion Communications Co., Ltd.";
-	case ID('T', 'S', 'B'): return "Toshiba America Info Systems Inc";
-	case ID('T', 'S', 'T'): return "Transtream Inc";
-	case ID('U', 'N', 'K'): return "Unknown";
-	case ID('V', 'E', 'S'): return "Vestel Elektronik Sanayi ve Ticaret A. S.";
-	case ID('V', 'I', 'T'): return "Visitech AS";
-	case ID('V', 'I', 'Z'): return "VIZIO, Inc";
-	case ID('V', 'L', 'V'): return "Valve";
-	case ID('V', 'S', 'C'): return "ViewSonic Corporation";
-	case ID('Y', 'M', 'H'): return "Yamaha Corporation";
-	default:                return "Unknown";
+	if (id >= sizeof(pnp_ids) / sizeof(pnp_ids[0])) {
+		return "Unknown";
 	}
-#undef ID
+
+	const char *manu = pnp_ids[id];
+	return manu ? manu : "Unknown";
 }
 
 /* See https://en.wikipedia.org/wiki/Extended_Display_Identification_Data for layout of EDID data.
diff --git a/meson.build b/meson.build
index 992b09b64..b2a30b689 100644
--- a/meson.build
+++ b/meson.build
@@ -3,7 +3,7 @@ project(
 	'c',
 	version: '0.16.0-dev',
 	license: 'MIT',
-	meson_version: '>=0.58.1',
+	meson_version: '>=0.59.0',
 	default_options: [
 		'c_std=c11',
 		'warning_level=2',
diff --git a/meson_options.txt b/meson_options.txt
index 1a439a4d8..ea50e48bb 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -2,6 +2,7 @@ option('xcb-errors', type: 'feature', value: 'auto', description: 'Use xcb-error
 option('xwayland', type: 'feature', value: 'auto', yield: true, description: 'Enable support for X11 applications')
 option('examples', type: 'boolean', value: true, description: 'Build example applications')
 option('icon_directory', description: 'Location used to look for cursors (default: ${datadir}/icons)', type: 'string', value: '')
+option('pnpids_file', description: 'Path to pnp.ids (default: ${datadir}/hwdata/pnp.ids)', type: 'string', value: '')
 option('renderers', type: 'array', choices: ['auto', 'gles2', 'vulkan'], value: ['auto'], description: 'Select built-in renderers')
 option('backends', type: 'array', choices: ['auto', 'drm', 'libinput', 'x11'], value: ['auto'], description: 'Select built-in backends')
 option('allocators', type: 'array', choices: ['auto', 'gbm'], value: ['auto'],
-- 
GitLab

